name: ci

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '00 00 * * *'

jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build:
          - stable
          - beta
          - nightly
          - nightly-musl
          - nightly-mips
          - nightly-32
          - macos
          - win-msvc
          - win-gnu
          - msrv
        include:
          - build: wasm32
            os: ubuntu-18.04
            rust: nightly
          - build: msrv
            os: ubuntu-18.04
            rust: 1.58.1
          - build: stable
            os: ubuntu-18.04
            rust: stable
          - build: beta
            os: ubuntu-18.04
            rust: beta
          - build: nightly
            os: ubuntu-18.04
            rust: nightly
          - build: nightly-musl
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: nightly-32
            os: ubuntu-18.04
            rust: nightly
            target: i686-unknown-linux-gnu
          - build: nightly-mips
            os: ubuntu-18.04
            rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - build: macos
            os: macos-latest
            rust: nightly
          - build: win-msvc
            os: windows-2019
            rust: nightly
          - build: win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Use Cross
        if: matrix.target != '' && matrix.build != 'wasm32'
        run: |
          # We used to install 'cross' from master, but it kept failing. So now
          # we build from a known-good version until 'cross' becomes more stable
          # or we find an alternative. Notably, between v0.2.1 and current
          # master (2022-06-14), the number of Cross's dependencies has doubled.
          cargo install --bins --git https://github.com/rust-embedded/cross --tag v0.2.1
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Build postman2openapi and all crates
        run: ${{ env.CARGO }} build --verbose --all ${{ env.TARGET_FLAGS }}

      - name: Run tests
        run: ${{ env.CARGO }} test --verbose --all ${{ env.TARGET_FLAGS }}

      - name: Install
        if: matrix.build == 'wasm32'
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Run wasm32 headless Chrome tests
        if: matrix.build == 'wasm32'
        run: wasm-pack test --headless --chrome

      - name: Run wasm32 Node.js tests
        if: matrix.build == 'wasm32'
        run: wasm-pack test --node

  rustfmt-clippy:
    name: rustfmt
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt
      - name: Check formatting
        run: |
          cargo fmt --all -- --check
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
